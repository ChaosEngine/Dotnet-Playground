@{
    ViewData["Title"] = "View code generator";

    string strongVal = "<strong>blah</strong>";
}
<h2>Testing view code generator</h2>
<p>value = @Html.Raw(strongVal)</p>

<pre id="editor">
@ViewData["CompiledViewCode"]
</pre>

@section Scripts
{
    <environment include="Development">
        <script src="~/lib/ace-builds/ace.js" type="text/javascript"></script>
        <script src="~/lib/ace-builds/mode-csharp.js" type="text/javascript"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://cdn.jsdelivr.net/npm/ace-builds@1.35.4/src-min/ace.js" integrity="sha256-Bd8+jyjInZJnqpfV76IqiyackXEvhXBV/8tbSgLlFjo=" crossorigin="anonymous" referrerpolicy="no-referrer"
                asp-fallback-src="~/lib/ace-builds/ace.js"
                asp-fallback-test="window.ace"></script>
        <script src="https://cdn.jsdelivr.net/npm/ace-builds@1.35.4/src-min/mode-csharp.js" integrity="sha256-FKu/+1QPtpcj8AfqyhXkgtgXN4FyZ7qUkptqZBWFEpc=" crossorigin="anonymous" referrerpolicy="no-referrer"
                asp-fallback-src="~/lib/ace-builds/mode-csharp.js"
                asp-fallback-test="(window.ace && window.ace.require('ace/mode/csharp') !== undefined)"></script>
        <script async src="https://cdn.jsdelivr.net/npm/ace-builds@1.35.4/src-min/theme-chaos.js" integrity="sha256-lRu0gkRGndk+VXlAjgl5pYj6clfOaCPozb0d8bTdD6k=" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    </environment>
    <script type="text/javascript">
        function AceSetCommandEnabled(ed, name, enabled) {
            const command = ed.commands.byName[name];
            if (!command.bindKeyOriginal)
                command.bindKeyOriginal = command.bindKey;
            command.bindKey = enabled ? command.bindKeyOriginal : null;
            ed.commands.addCommand(command);
            // special case for backspace and delete which will be called from
            // textarea if not handled by main commandb binding
            if (!enabled) {
                let key = command.bindKeyOriginal;
                if (key && typeof key === "object")
                    key = key[ed.commands.platform];
                if (/backspace|delete/i.test(key))
                    ed.commands.bindKey(key, "null")
            }
        }

        window.addEventListener('load', function () {
            if (window.ace && ace) {
                const editor = ace.edit("editor", {
                    maxLines: 30,
                    wrap: true,
                    showPrintMargin: false,
                    autoScrollEditorIntoView: true,
                    theme: window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ?
                        'ace/theme/chaos' : 'ace/theme/textmate'
                });
                const csharp = ace.require("ace/mode/csharp");
                if (csharp) {
                    const csharpMode = csharp.Mode;
                    editor.session.setMode(new csharpMode());
                }
                else
                    console.log('ace csharpMode not loaded!');
                //editor.setOption("readOnly", true);

                editor.on('focus', function () {
                    AceSetCommandEnabled(editor, "indent", true);
                    AceSetCommandEnabled(editor, "outdent", true);
                });
                editor.commands.addCommand({
                    name: "escape",
                    bindKey: { win: "Esc", mac: "Esc" },
                    exec: function () {
                        AceSetCommandEnabled(editor, "indent", false);
                        AceSetCommandEnabled(editor, "outdent", false);
                    }
                });
            }
            else
                console.log('no ace loaded!');
        });
    </script>
}
