using AspNetCore.ExistingDb.Tests;
using EFGetStarted.AspNetCore.ExistingDb;
using EFGetStarted.AspNetCore.ExistingDb.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Primitives;
using Microsoft.Net.Http.Headers;
using Moq;
using Moq.Protected;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace RazorPages
{
	/// <summary>
	/// https://gist.github.com/GeorgDangl/c0a85589616cf3ddffff054ee7cb585d
	/// </summary>
	class MockHttpClient
	{
		public virtual HttpClient GetMockClient(IConfiguration configuration)
		{
			var mockHttpMessageHandler = new Mock<HttpMessageHandler>();
			mockHttpMessageHandler.Protected()
				.Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>())
				.Returns((HttpRequestMessage request, CancellationToken cancellationToken) => GetMockResponse(request, cancellationToken));
			return new HttpClient(mockHttpMessageHandler.Object);
		}

		protected virtual Task<HttpResponseMessage> GetMockResponse(HttpRequestMessage request, CancellationToken cancellationToken)
		{
			if (request.RequestUri.LocalPath == "/expectedPath")
			{
				var response = new HttpResponseMessage(System.Net.HttpStatusCode.OK);
				response.Content = new StringContent(GetAuthJson(), Encoding.UTF8, "application/json");
				return Task.FromResult(response);
			}
			throw new NotImplementedException();
		}

		private string GetAuthJson()
		{
			return "{ \"isAuthenticated\": true }";
		}
	}

	class ImageMockHttpClient : MockHttpClient
	{
		const string Base64_LenaJpg = @"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";

		//public HttpClient GetMjpgStreamerMockClient()
		//{
		//	var mockHttpMessageHandler = new MjpgStreamerHttpClientHandler();
		//	//mockHttpMessageHandler.Protected()
		//	//	.Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>())
		//	//	.Returns((HttpRequestMessage request, CancellationToken cancellationToken) => GetMockResponse(request, cancellationToken));
		//	return new HttpClient(mockHttpMessageHandler/*.Object*/);
		//}

		public override HttpClient GetMockClient(IConfiguration configuration)
		{
			var mockHttpMessageHandler = new Mock<HttpMessageHandler>();
			mockHttpMessageHandler.Protected()
				.Setup<Task<HttpResponseMessage>>("SendAsync", ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>())
				.Returns((HttpRequestMessage request, CancellationToken cancellationToken) => GetMockResponse(request, cancellationToken));
			return new HttpClient(mockHttpMessageHandler.Object);
		}

		protected override Task<HttpResponseMessage> GetMockResponse(HttpRequestMessage request, CancellationToken cancellationToken)
		{
			if (request.RequestUri.LocalPath.Contains("WebCam", StringComparison.InvariantCultureIgnoreCase))
			{
				var response = new HttpResponseMessage(HttpStatusCode.OK)
				{
					Content = new ByteArrayContent(Encoding.Default.GetBytes(Base64_LenaJpg))
				};
				return Task.FromResult(response);
			}

			throw new NotImplementedException();
		}
	}

	public class WebCamGalleryTests : BaseControllerTest
	{
		PageContext LocalPageContext
		{
			get
			{
				var http_context = new DefaultHttpContext();
				var route_data = new RouteData();
				var page_act_desc = new PageActionDescriptor();
				var model_state_dict = new ModelStateDictionary();
				var action_ctx = new ActionContext(http_context, route_data, page_act_desc, model_state_dict);

				var page_context = new PageContext(action_ctx);
				//var viewData = new ViewDataDictionary(new EmptyModelMetadataProvider(), model_state_dict);
				//var tempData = new TempDataDictionary(http_context, Moq.Mock.Of<ITempDataProvider>());
				//var url = new UrlHelper(action_ctx);
				return page_context;
			}
		}

		public WebCamGalleryTests() : base()
		{
			SetupServices();
		}

		[Fact]
		public void OnGetTest()
		{
			//Arrange
			var serverTiming_mock = new Moq.Mock<Lib.AspNetCore.ServerTiming.IServerTiming>();
			serverTiming_mock.SetupGet(m => m.Metrics).Returns(() =>
			{
				return new List<Lib.AspNetCore.ServerTiming.Http.Headers.ServerTimingMetric>();
			});
			WebCamGallery wcg = new WebCamGallery(base.Configuration, serverTiming_mock.Object)
			{
				PageContext = this.LocalPageContext
			};

			//Act
			wcg.OnGet();

			//Assert
			if (!string.IsNullOrEmpty(Configuration["ImageDirectory"]))
			{
				Assert.IsAssignableFrom<IEnumerable<FileInfo>>(wcg.ThumbnailJpgs);
				Assert.NotNull(wcg.ThumbnailJpgs);
				Assert.NotEmpty(wcg.ThumbnailJpgs);
				DateTime? date = null;
				Assert.All(wcg.ThumbnailJpgs, (j) =>
				{
					Assert.IsType<FileInfo>(j);
					if (date.HasValue)
						Assert.True(j.LastWriteTime < date.Value);
					else
						date = j.LastWriteTime;
				});
			}
			Assert.NotNull(wcg.BaseWebCamURL);
		}

		[Theory]
		[InlineData("out-1.jpg")]
		[InlineData("thumbnail-1.jpg")]
		public void OnImageGetTest(string imageName)
		{
			//Arrange
			var serverTiming_mock = new Moq.Mock<Lib.AspNetCore.ServerTiming.IServerTiming>();
			serverTiming_mock.SetupGet(m => m.Metrics).Returns(() =>
			{
				return new List<Lib.AspNetCore.ServerTiming.Http.Headers.ServerTimingMetric>();
			});
			WebCamImagesModel wcim = new WebCamImagesModel()
			{
				PageContext = this.LocalPageContext
			};

			//Act
			var result = wcim.OnGet(base.Configuration, serverTiming_mock.Object, imageName);

			//Assert
			if (!string.IsNullOrEmpty(Configuration["ImageDirectory"]))
			{
				Assert.NotNull(result);
				Assert.IsType<PhysicalFileResult>(result);
				Assert.Equal(MediaTypeNames.Image.Jpeg, ((PhysicalFileResult)result).ContentType);
				Assert.NotNull(((PhysicalFileResult)result).EntityTag);
				//Assert.NotNull(((PhysicalFileResult)result).LastModified);
			}


			//test strong caching with ETAG and date tag checking
			if (!string.IsNullOrEmpty(Configuration["ImageDirectory"]))
			{
				//Arrange
				var fi = new FileInfo(Path.Combine(Configuration["ImageDirectory"], imageName));
				DateTimeOffset last = fi.LastWriteTime;
				long etagHash = new DateTimeOffset(last.Year, last.Month, last.Day, last.Hour, last.Minute, last.Second, last.Offset)
					.ToUniversalTime().ToFileTime() ^ fi.Length;
				var etag_str = '\"' + Convert.ToString(etagHash, 16) + '\"';
				wcim.Request.Headers.Add(HeaderNames.IfNoneMatch, new StringValues(etag_str));

				//Act
				result = wcim.OnGet(base.Configuration, serverTiming_mock.Object, imageName);

				//Assert			
				Assert.NotNull(result);
				Assert.IsType<StatusCodeResult>(result);
				Assert.Equal((int)HttpStatusCode.NotModified, ((StatusCodeResult)result).StatusCode);
			}
		}

		[Theory]
		[InlineData("bad.jpg", @"c:\blabla.txt", @"..\..\..\config.json")]
		public void On_NonExisting_ImageGetTest(params string[] badImageNames)
		{
			//Arrange
			var serverTiming_mock = new Moq.Mock<Lib.AspNetCore.ServerTiming.IServerTiming>();
			serverTiming_mock.SetupGet(m => m.Metrics).Returns(() =>
			{
				return new List<Lib.AspNetCore.ServerTiming.Http.Headers.ServerTimingMetric>();
			});
			WebCamImagesModel wcim = new WebCamImagesModel()
			{
				PageContext = this.LocalPageContext
			};

			//Act
			foreach (var image_name in badImageNames)
			{
				var result = wcim.OnGet(base.Configuration, serverTiming_mock.Object, image_name);

				//Assert
				Assert.NotNull(result);
				if (!string.IsNullOrEmpty(Configuration["ImageDirectory"]))
					Assert.IsType<NotFoundResult>(result);
				else
					Assert.IsType<NotFoundObjectResult>(result);
			}
		}

		[Fact]
		public async Task OnGetLiveAsyncTest()
		{
			//Arrange
			var serverTiming_mock = new Moq.Mock<Lib.AspNetCore.ServerTiming.IServerTiming>();
			serverTiming_mock.SetupGet(m => m.Metrics).Returns(() =>
			{
				return new List<Lib.AspNetCore.ServerTiming.Http.Headers.ServerTimingMetric>();
			});
			var environment_mock = new Moq.Mock<IWebHostEnvironment>();
			environment_mock.SetupGet(m => m.WebRootPath).Returns(() =>
			{
				return Path.Combine(ContentRoot, "wwwroot");
			});


			//MjpgStreamerHttpClientHandler.AddressWithProxy = "https://127.0.0.1/webcamgalleryFake/Fakelive";
			using (var dummy_just_for_costructor = new MjpgStreamerHttpClientHandler(Configuration))
			using (var cache = new MemoryCache(new MemoryCacheOptions()))
			using (var http_client_mock = new ImageMockHttpClient().GetMockClient(Configuration))
			{
				var client = new MjpgStreamerHttpClient(http_client_mock, environment_mock.Object, cache, dummy_just_for_costructor);
				WebCamImagesModel wcim = new WebCamImagesModel()
				{
					PageContext = this.LocalPageContext
				};

				//Act
				var result = await wcim.OnGetLiveAsync(serverTiming_mock.Object, client);

				//Assert
				if (!string.IsNullOrEmpty(Configuration["LiveWebCamURL"]))
				{
					Assert.NotNull(result);
					Assert.IsType<FileContentResult>(result);
					Assert.True(MediaTypeNames.Image.Jpeg == ((FileContentResult)result).ContentType ||
						"image/png" == ((FileContentResult)result).ContentType);
					Assert.NotNull(((FileContentResult)result).LastModified);
				}
				else
				{
					Assert.NotNull(result);
					Assert.IsType<FileContentResult>(result);
					Assert.True(MediaTypeNames.Image.Jpeg == ((FileContentResult)result).ContentType ||
						"image/png" == ((FileContentResult)result).ContentType);
					Assert.NotNull(((FileContentResult)result).LastModified);
				}
				//MjpgStreamerHttpClientHandler.AddressWithProxy = null;
			}
		}
	}
}
