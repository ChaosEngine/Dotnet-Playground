//Offline mode service worker implementation

self.addEventListener('install', function (e) {
	const domain = new URL(location).searchParams.get('domain');

	e.waitUntil(
		caches.open('WebCamGallery').then(function (cache) {
			return cache.addAll([
				domain + '',
				domain + 'WebCamGallery',
				domain + 'lib/bootstrap/dist/css/bootstrap.css',
				domain + 'css/site.css',
				domain + 'lib/blueimp-gallery/css/blueimp-gallery.min.css',
				domain + 'lib/video.js/dist/video-js.min.css',
				domain + 'lib/jquery/dist/jquery.js',
				domain + 'lib/popper.js/dist/umd/popper.js',
				domain + 'lib/bootstrap/dist/js/bootstrap.js',
				domain + 'js/site.js',
				domain + 'lib/blueimp-gallery/js/blueimp-gallery.min.js',
				domain + 'lib/video.js/dist/video.min.js'
			]);
		})
	);
});

self.addEventListener('fetch', event => {
	event.respondWith(caches.match(event.request).then(function (response) {
		// caches.match() always resolves
		// but in case of success response will have value
		if (response !== undefined)
		{
			return response;
		}
		else 
		{
			return fetch(event.request).then(function (response) {
				// response may be used only once
				// we need to save clone to put one copy in cache
				// and serve second one
				let responseClone = response.clone();

				caches.open('WebCamGallery').then(function (cache) {
					cache.put(event.request, responseClone);
				});
				return response;
			}).catch(function () {
				return caches.match('/');
			});
		}
	}));
});
