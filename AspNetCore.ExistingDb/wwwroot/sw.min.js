"use strict";
//Offline mode service worker implementation
const CACHE_NAME = 'WebCamGallery';

self.addEventListener('install', function (event) {
	const domain = new URL(location).searchParams.get('domain');

	event.waitUntil(
		caches.open(CACHE_NAME).then(function (cache) {
			return cache.addAll([
				domain + '',
				domain + 'WebCamGallery',
				domain + 'lib/bootstrap/dist/css/bootstrap.css',
				domain + 'css/site.css',
				domain + 'lib/blueimp-gallery/css/blueimp-gallery.min.css',
				domain + 'lib/video.js/dist/video-js.min.css',
				domain + 'lib/jquery/dist/jquery.js',
				domain + 'lib/bootstrap/dist/js/bootstrap.bundle.min.js',
				domain + 'js/site.js',
				domain + 'lib/blueimp-gallery/js/blueimp-gallery.min.js',
				domain + 'lib/video.js/dist/video.min.js'
			]);
		})
	);
});

self.addEventListener('fetch', event => {
	event.respondWith(caches.match(event.request).then(cached_response => {
		// caches.match() always resolves
		// but in case of success response will have value
		// if (response)
		// 	return response;

		return fetch(event.request).then(response => {
			// Check if we received a valid response
			if (!response || response.status !== 200 || response.type !== 'basic') {
				return fetch(event.request);
			}

			if (event.request.method !== 'GET')
				return response;

			// response may be used only once
			// we need to save clone to put one copy in cache
			// and serve second one
			let responseClone = response.clone();

			caches.open(CACHE_NAME).then(cache => {
				cache.put(event.request, responseClone);
			});
			return response;
		}).catch(() => {
			return cached_response;
		});

	}));
});
